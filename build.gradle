plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
}

group = 'com.pragma'
version = '0.0.1-SNAPSHOT'
description = 'Microservicio de Usuarios para gesti√≥n de roles'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

ext {
	mapstructVersion = '1.6.3'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	runtimeOnly 'com.mysql:mysql-connector-j'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	implementation 'org.springframework.boot:spring-boot-starter-validation:3.5.4'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	compileOnly 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
	annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

	implementation 'org.springframework.security:spring-security-crypto'
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
	}
	afterEvaluate {
		classDirectories.setFrom files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/mapper/**',
					'**/configuration/**',
					'**/*MapperImpl.class'
			])
		})
	}
}


tasks.named('test') {
	useJUnitPlatform()
}
